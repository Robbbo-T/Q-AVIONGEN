# GAIA-QAO-AdVent Environment Configuration Template
#
# INSTRUCTIONS:
# 1. Copy this file to a new file named '.env' in the same directory.
# 2. Update the placeholder values with your local development settings.
# 3. The .env file is ignored by Git and should NEVER be committed to the repository.

# --- General Application Settings ---
NODE_ENV=development
LOG_LEVEL=info # (debug, info, warn, error)
SECRET_KEY=replace_this_with_a_long_random_string_for_session_signing

# --- Docker Compose Configuration ---
# User and Group ID for running containers, avoids permission issues on Linux.
# Use 'id -u' and 'id -g' to find your local values.
UID=1000
GID=1000

# --- Database Configuration (PostgreSQL) ---
# This connects the API services to the database running in Docker.
POSTGRES_DB=gaia_qao_db
POSTGRES_USER=gaia_admin
POSTGRES_PASSWORD=replace_with_a_strong_password
POSTGRES_HOST=db # The service name in docker-compose.yml
POSTGRES_PORT=5432

# --- API and Dashboard Services ---
# Port mapping for local access
API_GATEWAY_PORT=8080
FLIGHTOPS_DASHBOARD_PORT=3000

# --- High-Performance Computing (HPC) & Simulation Endpoints ---
# Endpoints for connecting to simulated HPC services.
HPC_SCHEDULER_ENDPOINT=http://hpc-scheduler:8888
CFD_SOLVER_API=http://cfd-solver:5001
QUANTUM_SIMULATOR_API=http://quantum-sim:5002

# --- Quantum Systems Configuration ---
# These values are read by scripts/quantum_setup.py to create the initial config.
# Represents the connection point for the QPU hardware/simulator.
QPU_ENDPOINT=qpu-local-simulator:7701
# The classical navigation system used as a baseline for Q-INS calibration.
QINS_CALIBRATION_REFERENCE=classical-irs-primary
# Ground station endpoint for Quantum Key Distribution (QKD) simulation.
QKD_GROUND_STATION_IP=192.168.1.100

# --- Third-Party Service API Keys (Use Dummy Keys for Local Dev) ---
# Example for a weather data provider
WEATHER_API_KEY=dummy_weather_api_key_replace_if_needed
# Example for a mapping/geospatial service
GEOSPATIAL_API_KEY=dummy_geospatial_api_key_replace_if_needed

# --- Kubernetes Deployment Configuration ---
# Used by scripts/deploy.sh for connecting to different environments.
# The Docker Registry URL where images will be pushed.
REGISTRY_URL=registry.gaia-qao.cloud
# The default Kubernetes context to use for STAGING deployments.
KUBE_CONTEXT_STAGING=gaia-qao-cluster-staging
# The default Kubernetes context to use for PRODUCTION deployments.
KUBE_CONTEXT_PRODUCTION=gaia-qao-cluster-production

# --- Data Governance & Security ---
# Master key for encrypting sensitive data at rest (e.g., in the database).
# IMPORTANT: In a real production environment, this would be managed by a vault (e.g., HashiCorp Vault, AWS KMS).
DATA_ENCRYPTION_KEY=replace_this_with_a_32_byte_random_string
