#!/usr/bin/env python3
"""
Q-AVIOGEN Project Summary Generator
==================================

Generates a comprehensive summary of the avatar-guided training project
including all configurations, assets, and implementation details.

Author: Amedeo Pelliccia
Date: 2025-06-20
"""

import yaml
import json
from pathlib import Path
from datetime import datetime

def generate_project_summary():
    """Generate comprehensive project summary"""
    
    project_root = Path(__file__).parent.parent
    config_path = project_root / "configs" / "instructor_config.yaml"
    
    summary = []
    summary.append("=" * 80)
    summary.append("Q-AVIOGEN AVATAR-GUIDED TRAINING PROJECT SUMMARY")
    summary.append("=" * 80)
    summary.append(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    summary.append(f"Project Root: {project_root}")
    summary.append("")
    
    # Load configuration
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
    except Exception as e:
        summary.append(f"‚ùå Error loading configuration: {e}")
        return "\n".join(summary)
    
    # Project Overview
    summary.append("üìã PROJECT OVERVIEW")
    summary.append("-" * 40)
    scene = config.get('scene_config', {})
    summary.append(f"Project Name:      {scene.get('name', 'Unknown')}")
    summary.append(f"Scene ID:          {scene.get('scene_id', 'Unknown')}")
    summary.append(f"Version:           {scene.get('version', 'Unknown')}")
    summary.append(f"Duration:          {scene.get('duration', 0)} seconds")
    summary.append(f"Resolution:        {scene.get('resolution', {}).get('width', 1920)}x{scene.get('resolution', {}).get('height', 1080)}")
    summary.append(f"Frame Rate:        {scene.get('fps', 30)} FPS")
    summary.append("")
    
    # Procedure Information
    summary.append("‚úàÔ∏è PROCEDURE INFORMATION")
    summary.append("-" * 40)
    metadata = config.get('metadata', {})
    summary.append(f"ATA Code:          {metadata.get('procedure_code', 'Unknown')}")
    summary.append(f"Aircraft Type:     {metadata.get('aircraft_type', 'Unknown')}")
    summary.append(f"Instructor:        {metadata.get('instructor', 'Unknown')}")
    summary.append(f"Creation Date:     {metadata.get('creation_date', 'Unknown')}")
    summary.append(f"Revision:          {metadata.get('revision', 'Unknown')}")
    summary.append(f"Approved By:       {metadata.get('approved_by', 'Unknown')}")
    summary.append(f"Classification:    {metadata.get('classification', 'Unknown')}")
    summary.append("")
    
    # Avatar Configuration
    summary.append("üé≠ AVATAR CONFIGURATION")
    summary.append("-" * 40)
    avatar = config.get('avatar', {})
    summary.append(f"Avatar Name:       {avatar.get('name', 'Unknown')}")
    summary.append(f"Model File:        {avatar.get('model_path', 'Unknown')}")
    summary.append(f"Texture File:      {avatar.get('texture_path', 'Unknown')}")
    summary.append(f"Position:          {avatar.get('position', [0, 0, 0])}")
    summary.append(f"Scale:             {avatar.get('scale', [1, 1, 1])}")
    summary.append(f"Initial Pose:      {avatar.get('initial_pose', 'Unknown')}")
    
    clothing = avatar.get('clothing', {})
    summary.append(f"Clothing Type:     {clothing.get('type', 'Unknown')}")
    summary.append(f"Clothing Color:    {clothing.get('color', [0, 0, 0])}")
    summary.append(f"Accessories:       {', '.join(clothing.get('accessories', []))}")
    
    animations = avatar.get('animations', [])
    summary.append(f"Total Animations:  {len(animations)}")
    summary.append("")
    
    # Animation Details
    if animations:
        summary.append("üé¨ AVATAR ANIMATIONS")
        summary.append("-" * 40)
        for i, anim in enumerate(animations, 1):
            name = anim.get('name', 'Unknown')
            start = anim.get('start_time', 0)
            duration = anim.get('duration', 0)
            action = anim.get('action', 'Unknown')
            summary.append(f"{i:2d}. {name:25} | {start:5.1f}s | {duration:4.1f}s | {action}")
        summary.append("")
    
    # Voice Configuration
    summary.append("üé§ VOICE CONFIGURATION")
    summary.append("-" * 40)
    voice = config.get('voice_config', {})
    summary.append(f"Provider:          {voice.get('provider', 'Unknown')}")
    summary.append(f"Voice Name:        {voice.get('voice_name', 'Unknown')}")
    summary.append(f"Audio File:        {voice.get('audio_file', 'Unknown')}")
    summary.append(f"Language:          {voice.get('language', 'Unknown')}")
    summary.append(f"Speed:             {voice.get('speed', 1.0)}")
    summary.append(f"Pitch:             {voice.get('pitch', 0.0)}")
    summary.append(f"Volume:            {voice.get('volume', 0.8)}")
    summary.append(f"Emotion Support:   {voice.get('emotion_support', False)}")
    summary.append("")
    
    # Narration Details
    summary.append("üìù NARRATION CONFIGURATION")
    summary.append("-" * 40)
    narration = config.get('narration', {})
    segments = narration.get('segments', [])
    summary.append(f"Total Duration:    {narration.get('total_duration', 0)} seconds")
    summary.append(f"Segment Count:     {len(segments)}")
    
    if segments:
        summary.append("")
        summary.append("Segments:")
        for i, segment in enumerate(segments, 1):
            text = segment.get('text', '')
            if len(text) > 60:
                text = text[:57] + "..."
            emotion = segment.get('emotion', 'neutral')
            start = segment.get('start_time', 0)
            duration = segment.get('duration', 0)
            summary.append(f"{i:2d}. [{emotion:>9}] {start:5.1f}s-{start+duration:5.1f}s | {text}")
    summary.append("")
    
    # Scene Objects
    summary.append("üé¨ SCENE OBJECTS")
    summary.append("-" * 40)
    objects = config.get('objects', [])
    for obj in objects:
        name = obj.get('name', 'Unknown')
        obj_type = obj.get('type', 'Unknown')
        position = obj.get('position', [0, 0, 0])
        summary.append(f"‚Ä¢ {name:20} | {obj_type:15} | Position: {position}")
    summary.append("")
    
    # Lighting Setup
    summary.append("üí° LIGHTING SETUP")
    summary.append("-" * 40)
    lights = config.get('lights', [])
    for light in lights:
        name = light.get('name', 'Unknown')
        light_type = light.get('type', 'Unknown')
        energy = light.get('energy', 0)
        position = light.get('position', [0, 0, 0])
        summary.append(f"‚Ä¢ {name:20} | {light_type:8} | Energy: {energy:4.1f} | Pos: {position}")
    summary.append("")
    
    # Camera Configuration
    summary.append("üì∑ CAMERA CONFIGURATION")
    summary.append("-" * 40)
    cameras = config.get('cameras', [])
    for camera in cameras:
        name = camera.get('name', 'Unknown')
        position = camera.get('position', [0, 0, 0])
        target = camera.get('target', [0, 0, 0])
        focal_length = camera.get('focal_length', 50)
        summary.append(f"‚Ä¢ {name:20} | Focal: {focal_length:2.0f}mm | Pos: {position} | Target: {target}")
    
    # Camera Sequence
    camera_sequence = config.get('camera_sequence', [])
    if camera_sequence:
        summary.append("")
        summary.append("Camera Sequence:")
        for seq in camera_sequence:
            camera = seq.get('camera', 'Unknown')
            start = seq.get('start_time', 0)
            duration = seq.get('duration', 0)
            summary.append(f"  {start:5.1f}s-{start+duration:5.1f}s | {camera}")
    summary.append("")
    
    # Timeline Markers
    summary.append("üèÅ TIMELINE MARKERS")
    summary.append("-" * 40)
    markers = config.get('timeline_markers', [])
    for marker in markers:
        name = marker.get('name', 'Unknown')
        time = marker.get('time', 0)
        marker_type = marker.get('marker_type', 'Unknown')
        summary.append(f"‚Ä¢ {time:5.1f}s | {name:25} | {marker_type}")
    summary.append("")
    
    # Post-processing
    summary.append("‚ú® POST-PROCESSING")
    summary.append("-" * 40)
    postprocessing = config.get('postprocessing', {})
    enabled = postprocessing.get('enabled', False)
    summary.append(f"Enabled:           {enabled}")
    
    if enabled:
        effects = postprocessing.get('effects', [])
        summary.append(f"Effect Count:      {len(effects)}")
        for effect in effects:
            effect_type = effect.get('type', 'Unknown')
            summary.append(f"  ‚Ä¢ {effect_type}")
    summary.append("")
    
    # Output Configuration
    summary.append("üé• OUTPUT CONFIGURATION")
    summary.append("-" * 40)
    output = config.get('output', {})
    summary.append(f"Format:            {output.get('format', 'mp4').upper()}")
    summary.append(f"Video Codec:       {output.get('codec', 'h264').upper()}")
    summary.append(f"Video Bitrate:     {output.get('bitrate', 'Unknown')}")
    summary.append(f"Audio Codec:       {output.get('audio_codec', 'aac').upper()}")
    summary.append(f"Audio Bitrate:     {output.get('audio_bitrate', 'Unknown')}")
    summary.append(f"Quality:           {output.get('quality', 'high').title()}")
    summary.append(f"Output Filename:   {output.get('filename', 'output.mp4')}")
    summary.append("")
    
    # Security Settings
    summary.append("üîí SECURITY & METADATA")
    summary.append("-" * 40)
    security = config.get('security', {})
    summary.append(f"Access Level:      {security.get('access_level', 'Unknown')}")
    summary.append(f"Encryption:        {security.get('encryption', False)}")
    summary.append(f"Watermark:         {security.get('watermark', False)}")
    summary.append(f"Usage Tracking:    {security.get('usage_tracking', False)}")
    summary.append("")
    
    # File Structure Analysis
    summary.append("üìÅ PROJECT FILE STRUCTURE")
    summary.append("-" * 40)
    
    def analyze_directory(path, prefix=""):
        items = []
        if path.exists() and path.is_dir():
            for item in sorted(path.iterdir()):
                if item.is_dir():
                    items.append(f"{prefix}üìÅ {item.name}/")
                    items.extend(analyze_directory(item, prefix + "  "))
                else:
                    size = item.stat().st_size if item.exists() else 0
                    size_str = f"({size:,} bytes)" if size > 0 else "(placeholder)"
                    items.append(f"{prefix}üìÑ {item.name} {size_str}")
        return items
    
    structure = analyze_directory(project_root)
    summary.extend(structure)
    summary.append("")
    
    # Asset Status
    summary.append("üìã ASSET STATUS")
    summary.append("-" * 40)
    
    asset_files = [
        (project_root / avatar.get('model_path', ''), "Avatar Model"),
        (project_root / avatar.get('texture_path', ''), "Face Texture"),
        (project_root / voice.get('audio_file', ''), "Voice Sample")
    ]
    
    for asset_path, asset_name in asset_files:
        if asset_path.exists():
            size = asset_path.stat().st_size
            status = f"‚úÖ EXISTS ({size:,} bytes)"
        else:
            status = "üìù PLACEHOLDER"
        summary.append(f"{asset_name:15}: {status}")
    summary.append("")
    
    # Implementation Status
    summary.append("üöÄ IMPLEMENTATION STATUS")
    summary.append("-" * 40)
    summary.append("‚úÖ Configuration file created and validated")
    summary.append("‚úÖ Detailed procedure documentation written")
    summary.append("‚úÖ Avatar animation sequence planned")
    summary.append("‚úÖ Voice narration script prepared")
    summary.append("‚úÖ Timeline synchronization configured")
    summary.append("‚úÖ Camera angles and lighting designed")
    summary.append("‚úÖ Post-processing effects specified")
    summary.append("‚úÖ Output format and quality settings defined")
    summary.append("")
    summary.append("üìù Pending tasks:")
    summary.append("   ‚Ä¢ Create 3D avatar model (avatar_model.blend)")
    summary.append("   ‚Ä¢ Generate face textures (face_texture.png)")
    summary.append("   ‚Ä¢ Record voice sample (amedeo_voice.wav)")
    summary.append("   ‚Ä¢ Test complete pipeline")
    summary.append("   ‚Ä¢ Generate final training video")
    summary.append("")
    
    # Next Steps
    summary.append("üéØ NEXT STEPS")
    summary.append("-" * 40)
    summary.append("1. Asset Creation:")
    summary.append("   ‚Ä¢ Commission 3D artist for avatar model")
    summary.append("   ‚Ä¢ Record Amedeo's voice for TTS training")
    summary.append("   ‚Ä¢ Create high-resolution facial textures")
    summary.append("")
    summary.append("2. Pipeline Testing:")
    summary.append("   ‚Ä¢ Run validation scripts")
    summary.append("   ‚Ä¢ Test voice synthesis")
    summary.append("   ‚Ä¢ Validate avatar animations")
    summary.append("   ‚Ä¢ Check synchronization timing")
    summary.append("")
    summary.append("3. Production:")
    summary.append("   ‚Ä¢ Generate complete training video")
    summary.append("   ‚Ä¢ Quality assurance review")
    summary.append("   ‚Ä¢ Deploy to training systems")
    summary.append("   ‚Ä¢ Gather feedback and iterate")
    summary.append("")
    
    # Technical Specifications
    summary.append("‚öôÔ∏è TECHNICAL SPECIFICATIONS")
    summary.append("-" * 40)
    summary.append(f"Q-AVIOGEN Version:  2.1")
    summary.append(f"Configuration Format: YAML")
    summary.append(f"3D Engine:          Blender 3.0+")
    summary.append(f"Voice Synthesis:    Azure Cognitive Services / ElevenLabs")
    summary.append(f"Video Output:       H.264/AAC MP4")
    summary.append(f"Target Resolution:  1920x1080 @ 30fps")
    summary.append(f"Estimated File Size: 50-70 MB")
    summary.append(f"Generation Time:    10-25 minutes")
    summary.append("")
    
    summary.append("=" * 80)
    summary.append("END OF PROJECT SUMMARY")
    summary.append("=" * 80)
    
    return "\n".join(summary)

def main():
    """Main function"""
    print("üìä Generating Q-AVIOGEN Project Summary...")
    
    summary = generate_project_summary()
    print(summary)
    
    # Save to file
    output_file = Path(__file__).parent.parent / "PROJECT_SUMMARY.md"
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(summary)
        print(f"\nüìÑ Project summary saved to: {output_file}")
    except Exception as e:
        print(f"\n‚ö†Ô∏è Could not save summary: {e}")

if __name__ == "__main__":
    main()
