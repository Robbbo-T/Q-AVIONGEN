#!/usr/bin/env python3
"""
Q-AVIOGEN Setup and Installation Script
Configura el sistema de seguimiento diario autom√°tico
"""

import os
import sys
import json
import shutil
import winreg
from pathlib import Path
import subprocess

class QAviogenSetup:
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.project_name = "Q-AVIOGEN"
        
    def check_requirements(self):
        """Verifica e instala los requisitos"""
        print("üîç Verificando requisitos...")
        
        required_packages = [
            'tkinter',
            'matplotlib',
            'pandas',
            'numpy'
        ]
        
        missing_packages = []
        
        for package in required_packages:
            try:
                if package == 'tkinter':
                    import tkinter
                elif package == 'matplotlib':
                    import matplotlib
                elif package == 'pandas':
                    import pandas
                elif package == 'numpy':
                    import numpy
                print(f"‚úÖ {package} est√° instalado")
            except ImportError:
                missing_packages.append(package)
                print(f"‚ùå {package} no est√° instalado")
        
        if missing_packages:
            print(f"\nüì¶ Instalando paquetes faltantes: {', '.join(missing_packages)}")
            self.install_packages(missing_packages)
        
        print("‚úÖ Todos los requisitos est√°n listos")
    
    def install_packages(self, packages):
        """Instala los paquetes faltantes"""
        for package in packages:
            if package == 'tkinter':
                print("‚ö†Ô∏è tkinter debe instalarse manualmente con Python")
                continue
            
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
                print(f"‚úÖ {package} instalado correctamente")
            except subprocess.CalledProcessError:
                print(f"‚ùå Error instalando {package}")
    
    def create_desktop_shortcut(self):
        """Crea acceso directo en el escritorio"""
        print("üñ•Ô∏è Creando acceso directo en el escritorio...")
        
        try:
            import win32com.client
            
            desktop = Path.home() / "Desktop"
            shortcut_path = desktop / f"{self.project_name} - Daily Task Manager.lnk"
            
            shell = win32com.client.Dispatch("WScript.Shell")
            shortcut = shell.CreateShortCut(str(shortcut_path))
            shortcut.Targetpath = sys.executable
            shortcut.Arguments = f'"{self.base_path / "daily_task_manager.py"}"'
            shortcut.WorkingDirectory = str(self.base_path)
            shortcut.IconLocation = sys.executable
            shortcut.save()
            
            print(f"‚úÖ Acceso directo creado: {shortcut_path}")
            
        except ImportError:
            print("‚ö†Ô∏è pywin32 no disponible, creando archivo .bat en su lugar...")
            self.create_batch_shortcut()
    
    def create_batch_shortcut(self):
        """Crea un archivo .bat como alternativa"""
        desktop = Path.home() / "Desktop"
        batch_path = desktop / f"{self.project_name} Daily Task Manager.bat"
        
        batch_content = f'''@echo off
title Q-AVIOGEN Daily Task Manager
cd /d "{self.base_path}"
python daily_task_manager.py
pause
'''
        
        with open(batch_path, 'w') as f:
            f.write(batch_content)
        
        print(f"‚úÖ Archivo batch creado: {batch_path}")
    
    def setup_startup(self):
        """Configura inicio autom√°tico con Windows"""
        print("üöÄ Configurando inicio autom√°tico...")
        
        try:
            # Crear script de inicio
            startup_script = self.base_path / "startup_qaviongen.bat"
            startup_content = f'''@echo off
cd /d "{self.base_path}"
python daily_task_manager.py --startup
'''
            
            with open(startup_script, 'w') as f:
                f.write(startup_content)
            
            # Copiar a carpeta de inicio de Windows
            startup_folder = Path.home() / "AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup"
            startup_dest = startup_folder / "Q-AVIOGEN_Daily_Task.bat"
            
            if startup_folder.exists():
                shutil.copy2(startup_script, startup_dest)
                print(f"‚úÖ Script de inicio configurado: {startup_dest}")
            else:
                print("‚ö†Ô∏è Carpeta de inicio no encontrada")
                print(f"Copia manualmente {startup_script} a la carpeta de inicio de Windows")
            
        except Exception as e:
            print(f"‚ùå Error configurando inicio autom√°tico: {e}")
    
    def create_calendar_file(self):
        """Crea archivo de calendario .ics para importar"""
        print("üìÖ Creando archivo de calendario...")
        
        from datetime import datetime, timedelta
        
        # Leer configuraci√≥n
        with open(self.base_path / "config.json", 'r') as f:
            config = json.load(f)
        
        start_date = datetime.strptime(config['start_date'], '%Y-%m-%d')
        
        ics_content = """BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Q-AVIOGEN//Daily Task Manager//ES
CALSCALE:GREGORIAN
METHOD:PUBLISH
X-WR-CALNAME:Q-AVIOGEN Desarrollo
X-WR-TIMEZONE:Europe/Madrid
X-WR-CALDESC:Plan de desarrollo de 30 d√≠as para Q-AVIOGEN
"""
        
        # Crear eventos para cada d√≠a
        phases = [
            ("Infraestructura m√≠nima (Docker + API)", 4),
            ("Documentaci√≥n Marketplace + Web", 3),
            ("Avatar y voz final", 4),
            ("Generaci√≥n de demos", 4),
            ("Azure listing (registro y validaci√≥n)", 5),
            ("AWS listing", 3),
            ("GCP listing", 3),
            ("Landing p√∫blica + CRM b√°sico", 4),
            ("Demo comercial PDF + PPT", 2),
            ("Test final full pipeline", 2)
        ]
        
        current_day = start_date
        task_index = 0
        hours_remaining = phases[task_index][1] * config['daily_hours']
        task_name = phases[task_index][0]
        
        for day in range(30):
            # Crear evento
            event_start = current_day.replace(hour=9, minute=0)  # 9 AM
            event_end = event_start + timedelta(hours=config['daily_hours'])
            
            ics_content += f"""
BEGIN:VEVENT
UID:{current_day.strftime('%Y%m%d')}@qaviongen.com
DTSTAMP:{datetime.now().strftime('%Y%m%dT%H%M%SZ')}
DTSTART:{event_start.strftime('%Y%m%dT%H%M%S')}
DTEND:{event_end.strftime('%Y%m%dT%H%M%S')}
SUMMARY:Q-AVIOGEN: {task_name}
DESCRIPTION:Trabajo en {task_name}\\nHoras: {min(config['daily_hours'], hours_remaining)}h\\nD√≠a {day + 1} de 30
LOCATION:Home Office
STATUS:TENTATIVE
TRANSP:OPAQUE
END:VEVENT"""
            
            current_day += timedelta(days=1)
            hours_remaining -= config['daily_hours']
            
            if hours_remaining <= 0 and task_index + 1 < len(phases):
                task_index += 1
                task_name = phases[task_index][0]
                hours_remaining = phases[task_index][1] * config['daily_hours']
        
        ics_content += "\nEND:VCALENDAR"
        
        # Guardar archivo
        calendar_file = self.base_path / "Q-AVIOGEN_Plan_30_Dias.ics"
        with open(calendar_file, 'w', encoding='utf-8') as f:
            f.write(ics_content)
        
        print(f"‚úÖ Archivo de calendario creado: {calendar_file}")
        print("   Puedes importarlo en Google Calendar, Outlook, etc.")
    
    def create_readme(self):
        """Crea archivo README con instrucciones"""
        print("üìñ Creando documentaci√≥n...")
        
        readme_content = f"""# Q-AVIOGEN Daily Task Manager

## Instalaci√≥n Completada ‚úÖ

El sistema de seguimiento diario de Q-AVIOGEN ha sido configurado correctamente.

## Archivos Creados

- `daily_task_manager.py` - Aplicaci√≥n principal
- `config.json` - Configuraci√≥n del proyecto
- `Q-AVIOGEN_Plan_30_Dias.ics` - Calendario para importar
- `startup_qaviongen.bat` - Script de inicio autom√°tico
- `task_progress.json` - Archivo de progreso (se crea autom√°ticamente)

## C√≥mo Usar

### Inicio Diario Autom√°tico
- El sistema se inicia autom√°ticamente al encender Windows
- Muestra una notificaci√≥n con la tarea del d√≠a
- Opci√≥n de abrir el panel completo

### Ejecutar Manualmente
```bash
python daily_task_manager.py
```

### Modo Solo Notificaci√≥n
```bash
python daily_task_manager.py --startup
```

## Funcionalidades

### Panel Principal
- üìã Tarea del d√≠a actual
- ‚è∞ Horas planificadas vs trabajadas
- ‚úÖ Marcar tareas como completadas
- üìä Progreso general del proyecto

### Forecast de Ingresos
- üí∞ Proyecci√≥n mensual de ingresos
- üìà Gr√°ficos de crecimiento
- üë• Estimaci√≥n de clientes
- üéØ Milestones por fase

### Progreso Detallado
- üìã Todas las tareas del proyecto
- üîç Progreso por fases
- üìù Notas y tiempo real trabajado
- üìä Estad√≠sticas de eficiencia

## Configuraci√≥n

Edita `config.json` para personalizar:
- Horas de trabajo diarias
- D√≠as laborables
- Objetivos de ingresos
- Fechas de lanzamiento

## Calendario

Importa `Q-AVIOGEN_Plan_30_Dias.ics` en tu aplicaci√≥n de calendario favorita:
- Google Calendar
- Microsoft Outlook
- Apple Calendar
- Cualquier app compatible con .ics

## Soporte

Para problemas o mejoras:
- Revisa los logs en la aplicaci√≥n
- Verifica que todos los requisitos est√©n instalados
- Contacta al equipo de desarrollo

## Cronograma de 30 D√≠as

### Fases del Proyecto:
1. **Infraestructura m√≠nima** (4 d√≠as) - Docker + API b√°sica
2. **Documentaci√≥n Marketplace** (3 d√≠as) - Docs para Azure/AWS/GCP
3. **Avatar y voz final** (4 d√≠as) - Sistema TTS completo
4. **Generaci√≥n de demos** (4 d√≠as) - Material comercial
5. **Azure listing** (5 d√≠as) - Registro y validaci√≥n
6. **AWS listing** (3 d√≠as) - Marketplace AWS
7. **GCP listing** (3 d√≠as) - Marketplace GCP
8. **Landing p√∫blica + CRM** (4 d√≠as) - Web final
9. **Demo comercial** (2 d√≠as) - PDF + PPT
10. **Test final** (2 d√≠as) - Validaci√≥n completa

### Objetivos de Ingresos:
- **Mes 1**: $25,000 ARR
- **Mes 3**: $100,000 ARR
- **Mes 6**: $500,000 ARR
- **Mes 12**: $2,000,000 ARR

¬°√âxito en el desarrollo de Q-AVIOGEN! üöÄ
"""
        
        readme_file = self.base_path / "README_Daily_Task_Manager.md"
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print(f"‚úÖ Documentaci√≥n creada: {readme_file}")
    
    def run_setup(self):
        """Ejecuta la configuraci√≥n completa"""
        print("üöÄ Iniciando configuraci√≥n de Q-AVIOGEN Daily Task Manager\n")
        
        try:
            self.check_requirements()
            print()
            
            self.create_desktop_shortcut()
            print()
            
            self.setup_startup()
            print()
            
            self.create_calendar_file()
            print()
            
            self.create_readme()
            print()
            
            print("üéâ ¬°Configuraci√≥n completada exitosamente!")
            print("\nüìã Pr√≥ximos pasos:")
            print("1. Importa Q-AVIOGEN_Plan_30_Dias.ics en tu calendario")
            print("2. El sistema se iniciar√° autom√°ticamente ma√±ana")
            print("3. Usa el acceso directo del escritorio para abrir el panel")
            print("4. ¬°Comienza a trabajar en Q-AVIOGEN!")
            
            # Preguntar si ejecutar ahora
            try:
                response = input("\n¬øQuieres abrir el Task Manager ahora? (y/n): ")
                if response.lower() in ['y', 'yes', 's', 'si', 's√≠']:
                    subprocess.run([sys.executable, "daily_task_manager.py"])
            except KeyboardInterrupt:
                print("\nüëã ¬°Hasta luego!")
            
        except Exception as e:
            print(f"‚ùå Error durante la configuraci√≥n: {e}")
            print("Por favor revisa los errores y ejecuta setup.py nuevamente")

if __name__ == "__main__":
    setup = QAviogenSetup()
    setup.run_setup()
